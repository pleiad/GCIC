(menhir
 (modules parser)
 ;; The flags: (https://cambium.inria.fr/~fpottier/menhir/manual.pdf)
 ;; --table: Enables incremental parsing. Needed for the error messages.
 ;; --dump --explain: Produces information of the parser automaton. Useful for debugging.
 ;; --strict: Compilation fails if the parser has shift-reduce conflicts.
 (flags --table --dump --strict --explain))

(library
 (name parsing)
 (modules parser lexer ast lex_and_parse parserMessages command)
 (libraries common sedlex menhirLib kernel)
 (preprocess
  (pps sedlex.ppx)))

;; Taken from https://gitlab.inria.fr/fpottier/menhir/-/blob/master/demos/calc-syntax-errors/dune

;; This section deals with the .messages file.

;; The following rule generates "parserMessages.ml" based on the source file
;; "parserMessages.messages". It requires the completeness check to have been
;; performed first. (If desired, this check could be disabled.)

(rule
 (deps parserMessages.check)
 (action
  (with-stdout-to
   parserMessages.ml
   (run
    menhir
    %{dep:parser.mly}
    --compile-errors
    %{dep:parserMessages.messages}))))

;; This rule generates a file "parserMessages.auto.messages" that contains a
;; list of all error states. It is used by the completeness check.

(rule
 (with-stdout-to
  parserMessages.auto.messages
  (run menhir %{dep:parser.mly} --list-errors)))

;; This rule implements the completeness check. It checks that every error
;; state listed in the auto-generated file "parserMessages.auto.messages"
;; is also listed in the file "parserMessages.messages" that is maintained
;; by the programmer.

(rule
 (with-stdout-to
  parserMessages.check
  (run
   menhir
   %{dep:parser.mly}
   --compare-errors
   %{dep:parserMessages.auto.messages}
   --compare-errors
   %{dep:parserMessages.messages})))
